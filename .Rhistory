model.svm=svm(Species~.,data=data.train)
pred.svm=predict(model.svm,x,type='class')
resultVec=append(resultVec,mean(pred.svm==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
}
return mean(resultVec)
SVMFun=function(n){
resultVec=c()
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.svm=svm(Species~.,data=data.train)
pred.svm=predict(model.svm,x,type='class')
resultVec=append(resultVec,mean(pred.svm==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
return mean(resultVec)
SVMFun=function(n){
resultVec=c()
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.svm=svm(Species~.,data=data.train)
pred.svm=predict(model.svm,x,type='class')
resultVec=append(resultVec,mean(pred.svm==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
resultmean=mean(resultVec)
return resultmean
SVMFun=function(n){
resultVec=c()
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.svm=svm(Species~.,data=data.train)
pred.svm=predict(model.svm,x,type='class')
resultVec=append(resultVec,mean(pred.svm==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
return(mean(resultVec))
}
nnetFun=function(n){
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.nnet=nnet(Species~.,data=data.train,size=3)
pred.nnet=predict(model.nnet,x,type='class')
resultVec=append(resultVec,mean(pred.nnet==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
return(mean(resultVec))
}
nnetFun(5)
RForestFun=function(n){
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.rforest=randomForest(Species~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
resultVec=append(resultVec,mean(pred.rforest==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
return(mean(resultVec))
}
RForestFun(5)
SVMFun=function(n){
resultVec=c()
for (i in 1:n){
if(i==1){
resultVec=c()
}
samp=createDataPartition(iris$Species,p=0.7,list=F)
data.train=iris[samp,]
data.test=iris[-samp,]
x=subset(data.test,select=-Species)
y=data.test$Species
model.svm=svm(Species~.,data=data.train)
pred.svm=predict(model.svm,x,type='class')
resultVec=append(resultVec,mean(pred.svm==y))
}
cat("-------------------------------\n")
cat("예측률\n")
cat(resultVec,"\n")
cat("-------------------------------\n")
cat("평균예측률\n")
cat(mean(resultVec),"\n")
return(mean(resultVec))
}
SVMFun(5)
nnetresult=nnetFun(5)
rforestresult=RForestFun(5)
svmresult=SVMFun(5)
barplot(c(nnetresult,rforestresult,svmresult))
barplot(c(nnetresult,rforestresult,svmresult),xlab=c("NNet","RandomForest","SVM"))
barplot(c(nnetresult,rforestresult,svmresult),xlab="NNet","RandomForest","SVM")
barplot(c(nnetresult,rforestresult,svmresult),xlab=c("NNet","RandomForest","SVM"))
barplot(cbind(c("NNet","RandomForest","SVM"),c(nnetresult,rforestresult,svmresult)),xlab=)
barplot(rbind(c("NNet","RandomForest","SVM"),c(nnetresult,rforestresult,svmresult)),xlab=)
barplot(cbind(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),xlab=)
barplot(rbind(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),xlab=)
barplot(as.matrix(cbind(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM"))),xlab=)
barplot(as.matrix(rbind(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM"))),xlab=)
barplot(as.matrix(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),xlab=)
barplot(as.matrix(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),besides=T,xlab=)
barplot(as.matrix(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),beside=T,xlab=)
barplot(as.matrix(c(nnetresult,rforestresult,svmresult),c("NNet","RandomForest","SVM")),beside=T,xlab=)
plot(mean(jr$발생건수:200,predict(rf,list(발생건수=100:200)),type="l",xlab="발생건수",ylab="부상자수(추정)",col="blue")
abline(rgr$coefficients[1],rgr$coefficients[2],col="red")
plot(min(jr$발생건수):200,predict(rf,list(발생건수=100:200)),type="l",xlab="발생건수",ylab="부상자수(추정)",col="blue")
plot(min(jr$발생건수):200,predict(rf,list(발생건수=min(jr$발생건수):200)),type="l",xlab="발생건수",ylab="부상자수(추정)",col="blue")
abline(rgr$coefficients[1],rgr$coefficients[2],col="red")
legend(180,170,
c("회귀분석","랜덤포레스트"),
fill=c("red","blue"),
cex=0.8
)
plot(min(jr$발생건수):200,predict(rf,list(발생건수=min(jr$발생건수):200)),type="l",xlab="발생건수",ylab="부상자수(추정)",col="blue")
abline(rgr$coefficients[1],rgr$coefficients[2],col="red")
legend(170,170,
c("회귀분석","랜덤포레스트"),
fill=c("red","blue"),
cex=0.8
)
mr=read.csv("mushroom.csv")
head(mr)
mr=read.csv("mushroom.csv",header=F)
head(mr)
str(mr)
as.numeric('c')
for (i in 2:23){
mr[,i]=as.factor(mr[,i])
}
str(mr)
for (i in 2:23){
mr[,i]=as.factor(mr[,i])
mr[,i]=as.numeric(mr[,i])
}
str(mr)
head(mr)
library(dplyr)
head(mr)
library(dplyr)
mr=arrange(mr$V1)
library(dplyr)
mr=arrange(mr,V1)
head(mr)
library(dplyr)
mr=arrange(mr,V1)
head(mr)
library(dplyr)
mr=arrange(mr,V1)
head(mr);tail(mr)
table(mr$V1)
table(mr$V1)[1]
table(mr$V1)[1]/table(mr$v1)[2]
table(mr$V1)[1]/table(mr$V1)[2]
# Mushroom
## Random Forest를 이용한 버섯 분류
set.seed(1234)
set.seed(1234)
samp=createDataPartition(mushroom$V1,p=0.7,list=F)
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
resultVec=append(resultVec,mean(pred.rforest==y))
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
iris
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
resultVec=append(resultVec,mean(pred.rforest==y))
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
mean(pred.rforest==y)
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
mean(pred.rforest==y)
model.rforest=randomForest(as.factor(V1)~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
mr$V1=as.factor(mr$V1)
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
mr$V1=as.factor(mr$V1)
table(mr$V1)[1]/table(mr$V1)[2]
mr
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
mr=read.csv("mushroom.csv",header=F)
head(mr)
str(mr)
for (i in 2:23){
mr[,i]=as.factor(mr[,i])
mr[,i]=as.numeric(mr[,i])
}
str(mr)
head(mr)
library(dplyr)
mr=arrange(mr,V1) #rownames도 자동으로 정렬
head(mr);tail(mr)
mr$V1=as.factor(mr$V1)
table(mr$V1)[1]/table(mr$V1)[2]
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
library(caret)
library(caret)
mr=read.csv("mushroom.csv",header=F)
head(mr)
str(mr)
for (i in 2:23){
mr[,i]=as.factor(mr[,i])
mr[,i]=as.numeric(mr[,i])
}
str(mr)
head(mr)
library(dplyr)
mr=arrange(mr,V1) #rownames도 자동으로 정렬
head(mr);tail(mr)
mr$V1=as.factor(mr$V1)
table(mr$V1)[1]/table(mr$V1)[2]
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
library(caret)
library(randomForest)
mr=read.csv("mushroom.csv",header=F)
head(mr)
str(mr)
for (i in 2:23){
mr[,i]=as.factor(mr[,i])
mr[,i]=as.numeric(mr[,i])
}
str(mr)
head(mr)
library(dplyr)
mr=arrange(mr,V1) #rownames도 자동으로 정렬
head(mr);tail(mr)
mr$V1=as.factor(mr$V1)
table(mr$V1)[1]/table(mr$V1)[2]
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.nnet=nnet(V1~.,data=data.train,size=3)
library(nnet)
model.nnet=nnet(V1~.,data=data.train,size=3)
pred.nnet=predict(model.nnet,x,type='class')
mean(pred.nnet==y)
model.svm=svm(V1~.,data=data.train,size=3)
library(caret)
library(randomForest)
library(nnet)
library(e1071)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
mr=read.csv("mushroom.csv",header=F)
mr=read.csv("mushroom.csv",header=F);head(mr)
for(i in 1:23){
mr[,i]=as.factor(mr[,i])
}
head(mr)
for(i in 2:23){
mr[,i]=as.numeric(mr[,i])
}
head(mr)
table(mr)
for(i in 2:23){
cat("column: ",colnames(mr)[i])
}
for(i in 2:23){
cat("column: ",colnames(mr)[i])
print(table(mr[,i])
}
for(i in 2:23){
cat("column: ",colnames(mr)[i])
print(table(mr[,i]))
}
for(i in 2:23){
cat("column: ",colnames(mr)[i])
print(table(mr[,i]))
cat("----------------------------------\n")
}
num=c()
for(i in 2:23){
num=append(num,length(unique(mr[,i])))
}
sum(num)
head(mr2)
mr2=data.frame(V1=mr$V1)
head(mr2)
unique(mr$V2)
sort(unique(mr$V2))
for(i in 2:23){
for(j in sort(unique(mr[,i]))){
mr2=cbind(mr2,mr[,i]==j)
}
}
mr2
ncol(mr2)
str(mr2)
head(str(mr2))
head(str(mr2))
str(mr2)
library(dplyr)
mr2=arrange(mr2,V1)
colnames(mr2)=paste("V",1:118,sep="")
head(mr2)
colnames(mr2)=paste("V",1:118,sep="")
head(mr2)
colnames(mr2)=paste("V",1:118,sep="")
head(mr2)
mr3=data.frame(V1=mr$V1)
mr3=data.frame(V1=mr$V1);head(mr3)
count=2
count=2
for(i in 1:23){
for(j in sort(unique(mr[,i]))){
mr3=cbind(mr3,mr[,i]==j)
colnames(mr3)[count]=paste("V",i,"_",j,sep="")
count=count+1
}
}head(mr3)
count=2
for(i in 1:23){
for(j in sort(unique(mr[,i]))){
mr3=cbind(mr3,mr[,i]==j)
colnames(mr3)[count]=paste("V",i,"_",j,sep="")
count=count+1
}
}
head(mr3)
count=2
for(i in 2:23){
for(j in sort(unique(mr[,i]))){
mr3=cbind(mr3,mr[,i]==j)
colnames(mr3)[count]=paste("V",i,"_",j,sep="")
count=count+1
}
}
head(mr3)
mr3=arrange(mr3,V1);head(mr3)
str(mr3)
mr3=arrange(mr3,V1);head(mr3)
mr3=arrange(mr3,V1)
ncol(mr3)
length(unique(colnames(mr3)))
mr3=data.frame(V1=mr$V1);head(mr3)
count=2
for(i in 2:23){
for(j in sort(unique(mr[,i]))){
mr3=cbind(mr3,mr[,i]==j)
colnames(mr3)[count]=paste("V",i,"_",j,sep="")
count=count+1
}
}
head(mr3)
str(mr3)
ncol(mr3)
length(unique(colnames(mr3)))
ncol(mr3)
length(unique(colnames(mr3)))
mr3=arrange(mr3,V1)
head(mr3)
set.seed(1234)
samp=createDataPartition(mr$V1,p=0.7,list=F)
data.train=mr[samp,]
data.test=mr[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.nnet=nnet(V1~.,data=data.train,size=3)
pred.nnet=predict(model.nnet,x,type='class')
mean(pred.nnet==y)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
set.seed(1234)
samp=createDataPartition(mr3$V1,p=0.7,list=F)
data.train=mr3[samp,]
data.test=mr3[-samp,]
x=subset(data.test,select=-V1)
y=data.test$V1
model.rforest=randomForest(V1~.,data=data.train,ntree=100)
pred.rforest=predict(model.rforest,x,type='class')
mean(pred.rforest==y)
model.nnet=nnet(V1~.,data=data.train,size=3)
pred.nnet=predict(model.nnet,x,type='class')
mean(pred.nnet==y)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
head(pred.svm)
model.svm=svm(V1~.,data=data.train,size=3)
pred.svm=predict(model.svm,x,type='class')
mean(pred.svm==y)
